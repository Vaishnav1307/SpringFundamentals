IoC -> Inversion of control
    -> It is a principle in which spring will control logic of our application
       There are two main ways in IOC is divided
       1. DI  -> Dependency Injection -> Control is about dependencies in between the objects
       2. AoP/ Interceptors -> Aspect oriented Programming -> Intercepting and controlling methods execution
          breaking of code into different modules, also known as modularisation, where the aspect is the key unit of modularity.
          Aspects enable the implementation of crosscutting concerns such as- transaction, logging not central to business logic
          without cluttering the code core to its functionality. It does so by adding additional behaviour that is the advice to
          the existing code.

Context -> The place where you put object instances that you allow spring to be managed
           1. The spring context is like a bucket where you have all your instances stored which have unique identifiers
              and sometime aliases also

Approaches to use context ->
    1. manually defining bean with @Bean annotation
    -> When you manually defined the bean the name of the method will be taken as the name of that instance
       If you are creating two or more beans of same type then you need to specify name of instance context should
       provide you in getBean constructor, or it will give an exception
       a. We can create the beans of classes which are part of jdk
       b. We can create the beans of classes which are part of external dependencies

    2. By using stereotype annotations
    -> The annotation used for creating beans is @Component annotation it is a class level annotation which is given above
       the class of which bean you wanted and @ComponentScan annotation is used with it which is specified above the configuration
       class and inside @ComponentScan annotation basePackage is also specified
       a. We cannot create the beans of classes which are part of jdk
       b. We cannot create the beans of classes which are part of external dependencies


---------------------------------------------------------------------------------------------------------------------------

Controllers -> controllers are objects offering entry to the application , It is a layer which offers you entry point to
               the logic which is written in service layer

Service     -> service layer is objects implementing the use-cases which is business logic, services are define algorithm
               which happens to the data







